#/bin/bash

result=0
COMPARISON=MD5_COMPARISON
refc_plane_md5=test
golden_plane_md5=test

: <<'END_COMMENT' #start of annotation

#SYS variables
$LINENO

#for statatement by integer
idx=0
loop_cnt=1
for((idx=0; idx<loop_cnt; idx++)) do
    echo "${LINENO}"
    echo "${BASH_SOURCE}"
done

#for statement by array
codec_list=(avc hevc vp9 avs2 av1)
for val in ${codec_list[@]};do
    echo "$val"
done
for ((idx=0; idx<${#codec_list[@]}; idx++)); do
    echo "value[$idx]: = ${codec_list[$idx]}"
done

#Debugging Message format
_ERR_HDR_FMT="%.23s %s[%s]: "
_ERR_MSG_FMT="${_ERR_HDR_FMT}%s\n"
function err_msg {
    printf "$_ERR_MSG_FMT" $(date +%F.%T.%N) ${BASH_SOURCE[1]##*/} ${BASH_LINENO[0]} "${@}"
}
err_msg "test"

#switch
case $COUNTRY in
  Lithuania)
    echo -n "Lithuanian"
    ;;
  Romania | Moldova)
    echo -n "Romanian"
    ;;
  Italy | "San Marino" | Switzerland | "Vatican City")
    echo -n "Italian"
    ;;
  *)
    echo -n "unknown"
    ;;
esac

#read line by commend
idx=0
ps -a | grep multi_instance_ | while read line
do
    echo $line
    pid=$(echo "$line" | cut -d' ' -f1)
    echo "PID : $pid"
    kill_cmd="kill -9 $pid"
    echo "[$idx] $kill_cmd"
    $kill_cmd || echo ignore_error
    sleep 10
    idx=$((idx+1))
done

#cut
echo "test_2566x144" | cut -f 1 -d'_' --> test
echo "test_2566x144" | cut -f 2 -d'_' --> 2566x144
attr=$(echo $line | cut -d'=' -f1)

#display_info.txt
#picture_num : 00000000	monochrome : 00000000	bitdepth_y : 00000010	bitdepth_c : 00000010	width_dis : 00000272	height_dis : 00000416	log2_ctb_size : 00000006	c10v2 : 00000001	codec_std : 00000000

disp_width=$(head -n 1 display_info.txt | cut -f5 -d$'\t')
disp_height=$(head -n 1 display_info.txt | cut -f6 -d$'\t')
echo "${disp_width}"
echo "${disp_height}"
disp_width=$(echo $disp_width | cut -f2 -d':' | tr -d ' ')
disp_height=$(echo $disp_height | cut -f2 -d':' | tr -d ' ')
echo "$((10#$disp_width))"
echo "$((10#$disp_height))"
disp_width=$((10#$disp_width)) #000123 --> 123
disp_height=$((10#$disp_height))

#background exe / multi process
idx=0
cmd="./a.out"
for(( idx=0; idx<10; idx++ ))
do
    echo "$cmd"
    $cmd &
    sleep 3
done
echo "finished"

#random value
function get_random {
    start=$1
    end=$2
    size=$(($end - $start + 1))
    val2=$RANDOM
    val1=$(($val2 % size))
    val=$(($start + $val1%$size))
    echo "$val"
}
g_test=$(get_random 1 2)

#change file name and contents
idx=0
changed_file_name=""
ret=0
ls | while read line
do
    echo $line
    changed_file_name=""
    ret=0
    echo "$line" | grep concealment || ret=1
    echo "$ret"
    if [ $ret -eq 0 ]; then
        changed_file_name=${line/pic_level/slice_level}
        echo $changed_file_name
        sed -i 's/pic_level/slice_level/g' $line
        mv $line $changed_file_name
    fi
    idx=$((idx+1))
done

#grep
grep -rcin 'sorry' frost.txt # And sorry I could not travel both
grep -rinl 'sorry' # frost.txt
grep -E 'T.?o' frost.txt #Two reads diver... , To where it ...

#grep & cpoy
cp `grep -l "string" *` DST_DIR/

#head (head는 파일의 앞부분부터 확인)
test_str=$(head -c 3 frost.txt) # 3 characters,  two
test_row=$(head -n 2 frost.txt) # two rows

#tail (파일의 뒷부분부터 확인)
tail forst.txt # 마지막 부터 10행 출력
tail -n 20 forst.txt # 마지막 부터 20행 출력
tail -c 200 forst.txt # 마지막 부터 200 byte 출력
tail -f /var/log/messages # 파일 변경내용 출력
tail -f -s 1 -pid=3219 /var/log/messages # 3219 process가 종료 될 때까지 1초 간격으로 파일 변경내용 출력

#download files with ftp
function get_data_with_ftp {
local HOST="xxx.xxx.xxx.xxx"
local USER="ian"
local PASSWD="123456789"
local stream=$1
local path=$2
local codec=$3

path=${path/"//"/"/"}
path=${path/"/nstream/qctool"/"/data/new_server/"}

echo "path : $path"

ftp -inv $HOST <<EOF
user $USER $PASSWD
bin
cd $path
get $stream
bye
EOF
}

#get file name & base dir
file_name=$(basename $file_path)
dir_path=$(dirname $file_path)

#if statement
#check folder
if [ ! -d "/etc/nginx/sites-available/" ];then
    mkdir /etc/nginx/sites-available/
fi

#check file
if [ ! -e "/etc/nginx/sites-available/test.txt" ];then
    touch /etc/nginx/sites-available/test.txt
fi

#if statement with regualar expression
#@note : \ --> escape character for metachatacter
test_str="2020_09.26_test"
if [[ "$test_str" =~ ^[0-9]{4}_[0-9]+\..* ]]; then
    echo "check : $test_str"
fi

#if arithmetic condition
A=10
b=20
if (( $A > $B ));then
    echo "true"
else
    echo "false"
fi

#patterns
#1)number : ^[0-9]*$
#2) alphabetical character : ^[a-zA-Z]*$
#3) korean character : ^[가-힣]*$
#4) #2&#3 : ^[a-zA-Z0-9]*$
#5) E-Mail : ^[a-zA-Z0-9]+@[a-zA-Z0-9]+$
#6) HP : ^01(?:0|1|[6-9]) - (?:\d{3}|\d{4}) - \d{4}$
#8) resident registration number : \d{6} \- [1-4]\d{6}
#9) IP Addr : ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3})

#split a file
split -l 1000 file_name out_file_prefix #put NUMBER lines per output file
split -b 5000 file_name out_file_prefix #put SIZE bytes per output file
split -b -d 5000 file_name out_file_prefix #out_file_prefix_00 01 02...

#md5
md5sum test.txt #e026b571b48196d084d1d1106dd4268f

#find & copy
find . -name NAME.EXT -exec cp -rfp {} /DST_DIR \;

END_COMMENT

echo "Finished"
